package cn.it.shop.listener;

import java.util.ArrayList;
import java.util.List;
import java.util.Timer;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;


import cn.it.shop.model.Category;
import cn.it.shop.model.Product;
import cn.it.shop.service.CategoryService;
import cn.it.shop.service.ProductService;
import cn.it.shop.util.ProductTimerTask;
/*
 * (用于项目启动的时候数据初始化)
 */
public class InitDataListener implements ServletContextListener {

	private ApplicationContext context=null;
	private ProductTimerTask productTimerTask=null;
	
	@Override
	public void contextDestroyed(ServletContextEvent arg0) {
		// 1.获取业务逻辑类查询商品信息
	}

	@Override
	public void contextInitialized(ServletContextEvent event) {
		// 解决方案1 :不可取，会把Spring配置文件加载两次
//		ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext-*.xml");
//		productService=(ProductService)context.getBean("productService");
//		System.out.println(productService);
		// 2：项目在启动时把Spring配置文件通过监听器加载，存储了ServletContext中，只需要获取即可
		
		// 解决方案2: 直接到到ServletContext中获取Spring配置文件,此方案的key不容易记住
//		ApplicationContext context=(ApplicationContext)event
//				.getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
//		productService=(ProductService)context.getBean("productService");
//		System.out.println("productService:"+productService);
		// 解决方案3：通过工具类加载即可
		context=WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());
		productTimerTask=(ProductTimerTask)context.getBean("productTimerTask");
		//把内置对象交给productTimerTask
		productTimerTask.setApplication(event.getServletContext());
		//通过设置定时器，让首页的数据每一小时同步一次（要配置为守护线程）
		new Timer(true).schedule(productTimerTask, 0, 1000*60*60);
	}

}
